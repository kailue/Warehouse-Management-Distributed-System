<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="1" name="pair_run"/>


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="7293" name="thymio-II"># variables for state
var state[4] = [0,0,0,0]
var new_state[4] = [0,0,0,0]

# variables for location
var direction = 2
var direction_vecx[4] = [0,1,0,-1]
var direction_vecy[4] = [1,0,-1,0]
var coord[2] = [0,0]
var dest[2] = [3,3]

# reset outputs
call sound.system(-1)
call leds.top(0,0,0)
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)

# subroutine to display the current state
sub display_state
	call leds.circle(0,state[1]*32,0,state[3]*32,0,state[2]*32,0,state[0]*32)

# subroutines for moving one unit
sub turn_right # turn right
	# update direction
	direction = (direction + 1) % 4
	# update coordinate
	coord[0] = coord[0] + direction_vecx[direction]
	coord[1] = coord[1] + direction_vecy[direction]
	# move
	if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
		motor.left.target = 400
		motor.right.target = 0
		new_state[0] = 0
		new_state[1] = 1
		new_state[2] = 0
		new_state[3] = 0
		emit pair_run 3
	end
	# update states
	call math.copy(state, new_state)
	callsub display_state

sub turn_left # turn left
	# update direction
	direction = (direction - 1) % 4
	# update coordinate
	coord[0] = coord[0] + direction_vecx[direction]
	coord[1] = coord[1] + direction_vecy[direction]
	# move
	if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
		motor.left.target = 0
		motor.right.target = 500
		new_state[0] = 1
		new_state[1] = 0
		new_state[2] = 0
		new_state[3] = 0
		emit pair_run 4
	end
	# update states
	call math.copy(state, new_state)
	callsub display_state

sub go_forward # go forward
	# update direction
	direction = direction
	# update coordinate
	coord[0] = coord[0] + direction_vecx[direction]
	coord[1] = coord[1] + direction_vecy[direction]
	# move
	if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
		motor.left.target = 150
		motor.right.target = 150
		new_state[0] = 1
		new_state[1] = 1
		new_state[2] = 0
		new_state[3] = 0
		emit pair_run 11
	end
	# update states
	call math.copy(state, new_state)
	callsub display_state

sub go_backward # U turn and go backward
	# update direction
	direction = (direction + 2) % 4
	# update coordinate
	coord[0] = coord[0] + direction_vecx[direction]
	coord[1] = coord[1] + direction_vecy[direction]
	# move
	if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
		motor.left.target = -300
		motor.right.target = 300
		new_state[2] = 1
		new_state[3] = 1
		emit pair_run 14
	end
	# update states
	call math.copy(state, new_state)
	callsub display_state


# subroutines for moving around the field
sub go_pickup # from idle zone go pick up stuff
	# go straight forward (South) until border
	while (coord[1]>0) do
		callsub go_forward
	end
	# turn left (and pick stuff up)
	callsub turn_left

sub go_dest # go to drop off
	# go fwd until x coord matches
	while (coord[0]&lt;dest[0]) do
		callsub go_forward
	end
	# turn left (enter the dest column)
	callsub turn_left
	# calculate diff in y, go fwd that many grids
	while (coord[1]&lt;dest[1]) do
		callsub go_forward
	end

sub go_idle # go to the idle zone
	# go top until border
	while (coord[1]&lt;4) do
		callsub go_forward
	end
	# go left until border
	callsub turn_left
	while (coord[0]>0) do
		callsub go_forward
	end
	callsub turn_left
	# turn left

# for each task cycle:
# from idle zone, go_pickup, go_dest, finally go_idle


# on board button controls
onevent buttons

	# start button
	when button.center == 1 do
		# tests goes here
				# update direction
		direction = direction
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = 150
			motor.right.target = 150
			new_state[0] = 1
			new_state[1] = 1
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 11
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state

				# update direction
		direction = (direction + 1) % 4
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = 400
			motor.right.target = 0
			new_state[0] = 0
			new_state[1] = 1
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 3
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state

	end

	# turn right
	when button.right == 1 do
		# update direction
		direction = (direction + 1) % 4
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = 400
			motor.right.target = 0
			new_state[0] = 0
			new_state[1] = 1
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 3
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state
	end

	# turn left
	when button.left == 1 do
		# update direction
		direction = (direction + 3) % 4
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = 0
			motor.right.target = 500
			new_state[0] = 1
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 4
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state
	end

	# go forward
	when button.forward == 1 do
		# update direction
		direction = direction
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = 150
			motor.right.target = 150
			new_state[0] = 1
			new_state[1] = 1
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 11
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state
	end

	# U turn and go backward
	when button.backward == 1 do
		# update direction
		direction = (direction + 2) % 4
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = -300
			motor.right.target = 300
			new_state[2] = 1
			new_state[3] = 1
			emit pair_run 14
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state
	end



# line following
onevent prox
	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 200
			motor.right.target = 100
			emit pair_run 0
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 0 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 100
			motor.right.target = 200
			emit pair_run 1
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 0
			motor.right.target = 0
			new_state[0] = 1
			new_state[1] = 1
			new_state[2] = 1
			new_state[3] = 1
			emit pair_run 2
		end
	end

	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 1 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 150
			motor.right.target = 50
			emit pair_run 5
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 0 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 50
			motor.right.target = 150
			emit pair_run 6
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 1 then
			motor.left.target = 0
			motor.right.target = 350
			emit pair_run 7
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 350
			motor.right.target = -100
			emit pair_run 8
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 1 then
			motor.left.target = 50
			motor.right.target = 300
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 9
		end
	end

	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 250
			motor.right.target = 50
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 10
		end
	end

	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 1 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			motor.left.target = -500
			motor.right.target = 100
			call leds.top(32,0,0)
			emit pair_run 12
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 1 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			motor.left.target = 100
			motor.right.target = 200
			call leds.top(0,32,0)
			emit pair_run 13
		end
	end

	when prox.ground.delta[1] &lt;= 400 do
		if state[2] == 1 and state[3] == 1 then
			motor.left.target = 200
			motor.right.target = 100
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 15
		end
	end

	call math.copy(state, new_state)
	callsub display_state

# direction:
#              | 0 (N)
#              |
#   (W) 3 ---     --- 1 (E)
#              |
#              | 2 (S)
#
#
# direction-vector: [x,y]
#              | [0,1]
#              |
#  [-1,0] ---     --- [1,0]
#              |
#              | [0,-1]
#
#
# coordinate: [x,y]
# ^ y
# |
# |
# |        x
# |---------->
# [0,0] 
</node>


<!--node thymio-II-->
<node nodeId="51816" name="thymio-II"># variables for state
var state[4] = [0,0,0,0]
var new_state[4] = [0,0,0,0]

# variable for testing
var count = 0

# variables for location
var direction = 0
var direction_vecx[4] = [0,1,0,-1]
var direction_vecy[4] = [1,0,-1,0]
var coord[2] = [0,0]
var dest[2] = [0,0]

# variables for tasks
var task = 0
var started = 0
var doneturn = 0
var doneturn1 = 0
var doneturn2 = 0

# variables for map
var max_x = 5
var max_y = 4


# reset outputs
call sound.system(-1)
call leds.top(0,0,0)
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)


# subroutine to display the current state
sub display_state
	call leds.circle(0,state[1]*32,0,state[3]*32,0,state[2]*32,0,state[0]*32)


# subroutines for moving one unit
sub turn_right # turn right
	# update direction
	direction = (direction + 1) % 4
	# update coordinate
	coord[0] = coord[0] + direction_vecx[direction]
	coord[1] = coord[1] + direction_vecy[direction]
	# move
	motor.left.target = 400
	motor.right.target = 0
	new_state[0] = 0
	new_state[1] = 1
	new_state[2] = 0
	new_state[3] = 0
	emit pair_run 3
	# update states
	call math.copy(state, new_state)
	callsub display_state

sub turn_left # turn left
	# update direction
	direction = (direction + 3) % 4
	# update coordinate
	coord[0] = coord[0] + direction_vecx[direction]
	coord[1] = coord[1] + direction_vecy[direction]
	# move
	motor.left.target = 0
	motor.right.target = 500
	new_state[0] = 1
	new_state[1] = 0
	new_state[2] = 0
	new_state[3] = 0
	emit pair_run 4
	# update states
	call math.copy(state, new_state)
	callsub display_state

sub go_forward # go forward
	# update direction
	direction = direction
	# update coordinate
	coord[0] = coord[0] + direction_vecx[direction]
	coord[1] = coord[1] + direction_vecy[direction]
	# move
	motor.left.target = 150
	motor.right.target = 150
	new_state[0] = 1
	new_state[1] = 1
	new_state[2] = 0
	new_state[3] = 0
	emit pair_run 11
	# update states
	call math.copy(state, new_state)
	callsub display_state

sub go_backward # U turn and go backward
	# update direction
	direction = (direction + 2) % 4
	# update coordinate
	coord[0] = coord[0] + direction_vecx[direction]
	coord[1] = coord[1] + direction_vecy[direction]
	# move
	motor.left.target = -300
	motor.right.target = 300
	new_state[2] = 1
	new_state[3] = 1
	emit pair_run 14
	# update states
	call math.copy(state, new_state)
	callsub display_state


# subroutines for moving around the field
# task == 1
sub go_pickup # from idle zone go pick up stuff
	if coord[1]>0 then
		# go straight forward (South) until border
		callsub go_forward
		doneturn = 0
	elseif doneturn == 0 then
		# turn left (and pick stuff up)
		callsub turn_left
		doneturn = 1
	end
	task = 2

# task == 2
sub go_dest # go to drop off
	# go fwd until x coord matches
	if coord[0]&lt;dest[0] then
		callsub go_forward
		doneturn = 0
	# turn left (enter the dest column)
	elseif doneturn == 0 then
		callsub turn_left
		doneturn = 1
	end
	# calculate diff in y, go fwd that many grids
	if (doneturn == 1) and (coord[1]&lt;dest[1]) then
		callsub go_forward
	end
	task = 3

# task == 3
sub go_idle # go to the idle zone
	# go top until border
	if coord[1]&lt;max_y then
		callsub go_forward
		doneturn1 = 0
	# turn left and go until border
	elseif doneturn1 == 0 then
		callsub turn_left
		doneturn1 = 1
	end
	if (doneturn1 == 1) and (coord[0]>0) then
		callsub go_forward
		doneturn2 = 0
	# turn left
	elseif doneturn2 == 0 then
		callsub turn_left
		doneturn2 = 1
	end
	task = 1

# for each task cycle:
# from idle zone, go_pickup, go_dest, finally go_idle
# task: 0 - idle (not implemented), 1 - go_pickup, 2 - go_dest, 3 - go_idle



# on board button controls
onevent buttons

	# start button
	when button.center == 1 do
	# test cases here
		count = 0
		coord = [0,0]
		dest = [1,2]
		direction = 1
		task = 0
		started = 1
		callsub go_forward
	end

	# turn right
	when button.right == 1 do
		# update direction
		direction = (direction + 1) % 4
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = 400
			motor.right.target = 0
			new_state[0] = 0
			new_state[1] = 1
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 3
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state
	end

	# turn left
	when button.left == 1 do
		# update direction
		direction = (direction + 3) % 4
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = 0
			motor.right.target = 500
			new_state[0] = 1
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 4
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state
	end

	# go forward
	when button.forward == 1 do
		# update direction
		direction = direction
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = 150
			motor.right.target = 150
			new_state[0] = 1
			new_state[1] = 1
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 11
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state
	end

	# U turn and go backward
	when button.backward == 1 do
		# update direction
		direction = (direction + 2) % 4
		# update coordinate
		coord[0] = coord[0] + direction_vecx[direction]
		coord[1] = coord[1] + direction_vecy[direction]
		# move
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
			motor.left.target = -300
			motor.right.target = 300
			new_state[2] = 1
			new_state[3] = 1
			emit pair_run 14
		end
		# update states
		call math.copy(state, new_state)
		callsub display_state
	end



# line following
onevent prox
	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 200
			motor.right.target = 100
			emit pair_run 0
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 0 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 100
			motor.right.target = 200
			emit pair_run 1
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 0
			motor.right.target = 0
			new_state[0] = 1
			new_state[1] = 1
			new_state[2] = 1
			new_state[3] = 1

		#####################

		if started == 1 then
			# !! : initialization is in button.center block.
			if task == 1 then
				callsub go_pickup
			elseif task == 2 then
				callsub go_dest
			elseif task == 3 then
				callsub go_idle
			end
		end

		#####################

			emit pair_run 2
		end
	end

	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 1 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 150
			motor.right.target = 50
			emit pair_run 5
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 0 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 50
			motor.right.target = 150
			emit pair_run 6
		end
	end

	# when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
	# 	if state[0] == 1 then
	# 		motor.left.target = 0
	# 		motor.right.target = 350
	# 		emit pair_run 7
	# 	end
	# end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 350
			motor.right.target = -100
			emit pair_run 8
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 1 then
			motor.left.target = 50
			motor.right.target = 300
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 9
		end
	end

	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			motor.left.target = 250
			motor.right.target = 50
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 10
		end
	end

	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 1 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			motor.left.target = 200
			motor.right.target = 100
			call leds.top(32,0,0)
			emit pair_run 12
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 1 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			motor.left.target = 100
			motor.right.target = 200
			call leds.top(0,32,0)
			emit pair_run 13
		end
	end

	when prox.ground.delta[1] &lt;= 400 do
		if state[2] == 1 and state[3] == 1 then
			motor.left.target = 200
			motor.right.target = 100
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 0
			emit pair_run 15
		end
	end

	call math.copy(state, new_state)
	callsub display_state

# direction:
#              | 0 (N)
#              |
#   (W) 3 ---     --- 1 (E)
#              |
#              | 2 (S)
#
#
# direction-vector: [x,y]
#              | [0,1]
#              |
#  [-1,0] ---     --- [1,0]
#              |
#              | [0,-1]
#
#
# coordinate: [x,y]
# ^ y
# |
# |
# |        x
# |---------->
# [0,0] 
</node>


</network>
